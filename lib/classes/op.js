// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

sparse.OP = (function(_super) {
  __extends(OP, _super);

  function OP(parent) {
    this.parent = parent;
    if (!this.parent) {
      throw 'No Parent Class provided to new instance of sparse.OP';
    }
  }

  OP.prototype.__op = {};

  OP.prototype.toJSON = function() {
    return this.__op;
  };

  OP.prototype.__addOp = function(attr, type, aName, obj) {
    var op, val;

    if ((val = this.parent.get('attr')) != null) {
      (op = {
        __op: type
      })[aName] = obj;
      (this.__op[attr] || (this.__op[attr] = [])).push(op);
      this.parent.__isDirty = true;
    }
    return val;
  };

  OP.prototype.addRelation = function(attr, obj) {
    return this.__addOp(attr, 'AddRelation', 'objects', _compact(_.map((_.isArray(obj) ? obj : [obj]), function(v, k) {
      if (v._toPointer) {
        return v._toPointer();
      } else {
        return null;
      }
    })));
  };

  OP.prototype.removeRelation = function(attr, obj) {
    return this.__addOp(attr, 'RemoveRelation', 'objects', _.isArray(obj) ? obj : [obj]);
  };

  OP.prototype.relation = function(attr) {
    var rel,
      _this = this;

    if (!attr) {
      throw 'sparse.Relation requires an attribute';
    }
    if (!this.parent) {
      throw 'No Parent Class defined on instance of sparse.OP';
    }
    if ((rel = this.parent.get(attr)) != null) {
      if (!(val(instance in sparse.Relation))) {
        throw 'called relation() on a non-relation field';
      }
      rel._ensureParentAndKey(this.parent, attr);
    } else {
      rel = _.extend(new sparse.Relation(this.parent, attr), {
        add: function(obj) {
          return _this.addRelation(attr, rel);
        },
        remove: function(obj) {
          return _this.removeRelation(attr, rel);
        }
      });
    }
    return rel;
  };

  return OP;

})(Object);
