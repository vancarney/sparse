{"name":"sParse","tagline":"Parse Rest API support for Backbone ","body":"sParse\r\n=======\r\n\r\nA *sparse* Parse API for Backbone\r\n\r\n#### Why sParse?\r\n\r\nParse.com provides a full featured and robust [Javascript API](https://parse.com/docs/api_libraries) implementation as a general purpose solution intended to work within all manner of javascript frameworks, but...\r\n\r\n - It's big... >80k big when minified\r\n - It only emulates Backbone and doesn't have all Backbone features\r\n - Using Sparse API within a Backbone App results in having two core libraries, a massive overlap of labor\r\n\r\nThose issues go against the ideals of developers who believe Web Apps should be small, fast and without duplication of labor. So it made sense to create a \"not so general purpose\" suite of Classes that would allow both new and existing Backbone Applications to integrate with the Parse REST API without adding substantial code overhead, or duplicating Backbone functionality in a seperate code base.\r\n\r\n**sParse's design Goals are as follows:**\r\n\r\n - Be small, compact and simple\r\n - Go wherever Backbone can go with no added dependencies\r\n - 'Drop In' to any existing Backbone Application\r\n - Quickly 'Convert' your existing Parse API app into a sParse Backbone App\r\n - Provide complete Parse REST API coverage (in progress)\r\n\r\n\r\nWith that said...\r\n\r\n\r\nDANGER WILL ROBINSON!!!\r\n-----------------------\r\n\r\nAPI Coverage is not complete, in fact it's missing core features such as Roles, Relations and Query Objects\r\nDue to the lack of these features, sparse is not recommended for production use at this time.\r\nCheck back soon though, as these features are in the works.\r\n\r\n\r\nBasic Usage\r\n-----------\r\n\r\n#### Accessing a Parse Collection\r\nCase: We wish to get all records from the Posts Object\r\n\r\n*javascript* example:\r\n```\r\nsparse.APP_ID = XXXXXXXXXX;\r\nsparse.REST_KEY = XXXXXXXXXX;\r\nPosts = sparse.Collection.extend({\r\n     className:'Posts',\r\n    model:(sparse.Model.extend({\r\n\t\tclassName:'Post',\r\n\t\tdefaults:{\r\n\t\t\tbody:\"\",\r\n\t\t\tuserKey:\"\",\r\n\t\t\tcontentKey:\"\"\r\n\t\t}\r\n\t}));\r\n})\r\nposts = new Posts();\r\nposts.fetch();\r\n\r\n``` \r\n\r\n\r\n*coffeescript* example:\r\n```\r\nsparse.APP_ID = XXXXXXXXXX\r\nsparse.REST_KEY = XXXXXXXXXX\r\nclass Posts extends sparse.Collection\r\n\tmodel:(class Post extends sparse.Model\r\n\t\tdefaults:\r\n\t\t\tbody:\"\"\r\n\t\t\tuserKey:\"\"\r\n\t\t\tcontentKey:\"\"\r\n\t)\r\nposts = new Posts()\r\nposts.fetch();\r\n``` \r\n\r\nsParse is wired to make life a little easier for [Coffeescript](http://coffeescript.org/) users by grabbing the classname and automatically setting the `className` param for you, with an Inflection to plualize the Model Class Name for you, mapping `Model` *Post* to the *Posts* Object.\r\n  \r\nConverting Parse Apps \r\n-----------\r\n\r\nSimply rename your Parse.Object and Parse.Collection references to sparse.Model and sparse.Collection accordingly\r\n\r\n```\r\nvar ParseTodo = Parse.Object.extend({\r\n  className: \"Todo\"\r\n});\r\n \r\nvar sparseTodo = sparse.Model.extend({\r\n  className: \"Todo\"\r\n});\r\n```\r\n\r\n\r\nor in *coffeescript*:\r\n```\r\nclass ParseTodo extends Parse.Object\r\n  className: \"Todo\"\r\n \r\nclass sparseTodo extends sparse.Model\r\n```\r\n\r\n\r\nUsers \r\n-----------\r\n\r\n#### Register a New User\r\n\r\n*javascript* example:\r\n```\r\nsparse.APP_ID = XXXXXXXXXX;\r\nsparse.REST_KEY = XXXXXXXXXX;\r\nnewUser = new sparse.User({\r\n\tusername:\"EdTesty\",\r\n\tpassword:\"s3cr3t\",\r\n\temail:\"ed.testy.testing.com\"\r\n})\r\nnewUser.save({\r\n\tsuccess:function(model, response, options) {\r\n\t\tconsole.log(\"user successfully created\"\r\n\t},\r\n\terror:function(model, response, options) {\r\n\t\tconsole.log(\"user creation failed\"\r\n\t}\r\n});\r\n\r\n```\r\n\r\n*coffeescript* example:\r\n```\r\nsparse.APP_ID = XXXXXXXXXX;\r\nsparse.REST_KEY = XXXXXXXXXX;\r\nnewUser = new sparse.User\r\n\tusername:\"EdTesty\"\r\n\tpassword:\"s3cr3t\"\r\n\temail:\"ed.testy.testing.com\"\r\nnewUser.save\r\n\tsuccess:(model, response, options)->\r\n\t\tconsole.log \"user successfully created\"\r\n\terror:(model, response, options)->\r\n\t\tconsole.log \"user creation failed\"\r\n``` \r\n\r\n#### User Login\r\n\r\n*javascript* example:\r\n```\r\nsparse.APP_ID = XXXXXXXXXX;\r\nsparse.REST_KEY = XXXXXXXXXX;\r\nuser = new sparse.User({\r\n\tusername:\"EdTesty\",\r\n\tpassword:\"s3cr3t\"\r\n})\r\nuser.login({\r\n\tsuccess:function(model, response, options) {\r\n\t\tconsole.log(\"user successfully created\");\r\n\t},\r\n\terror:function(model, response, options) {\r\n\t\tconsole.log(\"user creation failed\");\r\n\t}\r\n});\r\n\r\n```\r\n\r\n*coffeescript* example:\r\n```\r\nsparse.APP_ID = XXXXXXXXXX;\r\nsparse.REST_KEY = XXXXXXXXXX;\r\nuser = new sparse.User\r\n\tusername:\"EdTesty\",\r\n\tpassword:\"s3cr3t\"\r\nuser.login\r\n\tsuccess:(model, response, options)->\r\n\t\tconsole.log \"user successfully created\"\r\n\terror:(model, response, options)->\r\n\t\tconsole.log \"user creation failed\"\r\n```\r\n\r\n\r\n#### User Password Reset\r\n\r\n*javascript* example:\r\n```\r\nsparse.APP_ID = XXXXXXXXXX;\r\nsparse.REST_KEY = XXXXXXXXXX;\r\npwReset = new sparse.User({\r\n\temail:\"ed.testy@test.com\"\r\n})\r\npwReset.resetPassword({\r\n\tsuccess:function(model, response, options) {\r\n\t\tconsole.log(\"user successfully created\");\r\n\t},\r\n\terror:function(model, response, options) {\r\n\t\tconsole.log(\"user creation failed\");\r\n\t}\r\n});\r\n\r\n```\r\n\r\n*coffeescript* example:\r\n```\r\nsparse.APP_ID = XXXXXXXXXX;\r\nsparse.REST_KEY = XXXXXXXXXX;\r\npwReset = new sparse.User\r\n\temail:\"ed.testy@test.com\"\r\npwReset.resetPassword\r\n\tsuccess:(model, response, options)->\r\n\t\tconsole.log \"user successfully created\"\r\n\terror:(model, response, options)->\r\n\t\tconsole.log \"user creation failed\"\r\n```\r\n\r\n\r\nBatch Operations\r\n--------------\r\n\r\nSometimes you may want to throw a whole bunch of data at the Parse API all at once. For that we use the Parse API's Batch Request feature, which is supported by sParse via a special Batch Collection Object.\r\n\r\nsparse.Batch is Object Agnostic, so you may add any type of sparse.Model object for `create`, `upate` and `delete` operations.\r\nFor more info on Parse Batch read the [API Docs](https://parse.com/docs/rest#objects-batch)\r\n\r\n*javascript* example:\r\n```\r\nsparse.APP_ID = XXXXXXXXXX;\r\nsparse.REST_KEY = XXXXXXXXXX;\r\nPosts = sparse.Collection.extend({\r\n \tclassName:'Posts',\r\n\tmodel:(sparse.Model.extend({\r\n\t\tclassName:'Post',\r\n\t\tdefaults:{\r\n\t\t\tbody:\"\",\r\n\t\t\tuserKey:\"\",\r\n\t\t\tcontentKey:\"\"\r\n\t\t}\r\n\t}));\r\n})\r\nposts = new Posts();\r\nposts.fetch({\r\n\tsuccess:function(model,response,options)\r\n\t{\r\n\t\t# send our loaded Data Set to Batch\r\n\t\t(new sparse.Batch(model).exec({\r\n\t\t\tsuccess:function(model,response,options) {\r\n\t\t\t\tconsole.log(\"Batch imported successfully\");\r\n\t\t\t},\r\n\t\t\terror:function(model,response,options) {\r\n\t\t\t\tconsole.log(\"Batch import failed\");\r\n\t\t\t},\r\n\t\t}); \r\n\t}\r\n});\r\n``` \r\n\r\n\r\n*coffeescript* example: \r\n```\r\nsparse.APP_ID = XXXXXXXXXX\r\nsparse.REST_KEY = XXXXXXXXXX\r\nclass Posts extends sparse.Collection\r\n\turl:->\r\n\t\t\"data/posts.dump.json\"\r\n\tmodel:(class Post extends sparse.Model\r\n\t\tdefaults:\r\n\t\t\tbody:\"\"\r\n\t\t\tuserKey:\"\"\r\n\t\t\tcontentKey:\"\"\r\n\t)\r\nposts = new Posts()\r\nposts.fetch\r\n\tsuccess:(model,response,options)=>\r\n\t\t# send our loaded Data Set to Batch\r\n\t\t(new sparse.Batch model).exec\r\n\t\t\tsuccess:(model,response,options)=>\r\n\t\t\t\tconsole.log \"Batch imported successfully\"\r\n\t\t\terror:(model,response,options)=>\r\n\t\t\t\tconsole.log \"Batch import failed\"\r\n\r\n```\r\n\r\nView the Demo\r\n--------------\r\n\r\nA working Connect Server based demo app is available in the repo\r\nGit and NodeJS+NPM is required to install and run\r\n\r\n```\r\n$ git clone https://github.com/vancarney/sparse.git && cd sparse && npm install && npm start\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}