// Generated by CoffeeScript 1.10.0
var SparseDemo, global,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

global = typeof exports !== "undefined" && exports !== null ? exports : window;

if (!global.SparseDemo) {
  SparseDemo = global.SparseDemo = {};
}

(function($) {
  'use strict';
  return SparseDemo.CollectionView = (function(superClass) {
    extend(CollectionView, superClass);

    function CollectionView() {
      return CollectionView.__super__.constructor.apply(this, arguments);
    }

    CollectionView.prototype.reset = function() {
      return this.collection.reset([]);
    };

    CollectionView.prototype.init = function(o) {
      return this.collection.on('add remove change reset', (function(_this) {
        return function() {
          return _this.$el.find('#submit_query').attr('disabled', _this.collection.length < 1);
        };
      })(this));
    };

    CollectionView.prototype.loadCollection = function() {
      var options, opts;
      options = this['form'].getSettings();
      opts = {
        reset: true,
        error: function(m, r, o) {
          this.trigger('loadingStop');
          return console.log('failed to fetch collection');
        }
      };
      return this.collection.fetch(_.extend(options, opts));
    };

    CollectionView.prototype.collection = new (SparseDemo.TestCompanies = (function(superClass1) {
      extend(TestCompanies, superClass1);

      function TestCompanies() {
        return TestCompanies.__super__.constructor.apply(this, arguments);
      }

      TestCompanies.prototype.model = SparseDemo.TestCompany = (function(superClass2) {
        extend(TestCompany, superClass2);

        function TestCompany() {
          return TestCompany.__super__.constructor.apply(this, arguments);
        }

        return TestCompany;

      })(sparse.Model);

      return TestCompanies;

    })(sparse.Collection));

    CollectionView.prototype.childrenComplete = function() {
      this['form'].on('load', (function(_this) {
        return function(options) {
          if (options == null) {
            options = {};
          }
          return _this.loadCollection(options);
        };
      })(this));
      return this;
    };

    CollectionView.prototype.subviews = {
      'table': SparseDemo.CollectionTable = (function(superClass1) {
        extend(CollectionTable, superClass1);

        function CollectionTable() {
          return CollectionTable.__super__.constructor.apply(this, arguments);
        }

        CollectionTable.prototype.template = $('#textCompaniesItem').html();

        CollectionTable.prototype.setData = function(data) {
          if (data.length) {
            this.$el.find('tbody tr').remove();
            return _.each(data, (function(_this) {
              return function(v, k) {
                return _this.$el.find('tbody').append(_.template(_this.template, v.toJSON()));
              };
            })(this));
          } else {
            this.$el.find('tbody tr').remove();
            return this.$el.find('tbody').append(this.__o_template);
          }
        };

        CollectionTable.prototype.init = function(o) {
          this.__o_template = this.$el.find('tbody tr');
          return this.__parent.collection.on('reset', (function(_this) {
            return function(evt) {
              _this.__parent.trigger('loadingStop');
              return _this.setData(_this.__parent.collection.models);
            };
          })(this));
        };

        return CollectionTable;

      })(SparseDemo.BaseView),
      'form': SparseDemo.CollectionForm = (function(superClass1) {
        extend(CollectionForm, superClass1);

        function CollectionForm() {
          return CollectionForm.__super__.constructor.apply(this, arguments);
        }

        CollectionForm.prototype.getSettings = function() {
          var active, opts;
          opts = {
            limit: Number(this.$el.find('#limit').val())
          };
          if (((active = this.$el.find('#active').val()) != null) && active !== "") {
            opts.where = {
              active: Boolean(active)
            };
          }
          return opts;
        };

        CollectionForm.prototype.events = {
          'click #submit_query': function(evt) {
            evt.preventDefault();
            this.trigger('load');
            return false;
          }
        };

        return CollectionForm;

      })(SparseDemo.BaseView)
    };

    return CollectionView;

  })(SparseDemo.BaseView);
})(jQuery);
