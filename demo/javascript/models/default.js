// Generated by CoffeeScript 1.10.0
var Backbone, _, global, jQuery, sparse,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

global = typeof exports !== "undefined" && exports !== null ? exports : window;

if (typeof exports !== 'undefined') {
  _ = require('underscore')._;
  Backbone = require('backbone');
  jQuery = require('jQuery');
  sparse = require('../sparse').sparse;
}

(function($) {
  'use strict';
  var SparseDemo;
  if (!global.SparseDemo) {
    SparseDemo = global.SparseDemo = {};
  }
  sparse.Model.prototype.nestCollection = function(attributeName, nestedCollection) {
    var i, item, j, len;
    for (i = j = 0, len = nestedCollection.length; j < len; i = ++j) {
      item = nestedCollection[i];
      this.attributes[attributeName][i] = (nestedCollection.at(i)).attributes;
    }
    nestedCollection.bind('add', (function(_this) {
      return function(initiative) {
        if (!_this.get(attributeName)) {
          _this.attributes[attributeName] = [];
        }
        return (_this.get(attributeName)).push(initiative.attributes);
      };
    })(this));
    nestedCollection.bind('remove', (function(_this) {
      return function(initiative) {
        var updateObj;
        updateObj = {};
        updateObj[attributeName] = _.without(_this.get(attributeName), initiative.attributes);
        return _this.set(updateObj);
      };
    })(this));
    return nestedCollection;
  };
  return SparseDemo.DefaultData = (function(superClass) {
    extend(DefaultData, superClass);

    function DefaultData() {
      return DefaultData.__super__.constructor.apply(this, arguments);
    }

    DefaultData.prototype.url = function() {
      return 'data.json';
    };

    DefaultData.prototype.sync = function(method, model, options) {
      return Backbone.Model.prototype.sync.call(this, method, model, options);
    };

    DefaultData.prototype.initialize = function(o) {
      return this.bind('change', (function(_this) {
        return function() {
          return _.each(_this.attributes, function(v, k) {
            var className;
            return _this[className = "" + (k.charAt(0).toUpperCase()) + (k.substring(1, k.length))] = _this.nestCollection(className, new (sparse.Collection.extend({
              className: className,
              model: sparse.Model.extend({
                className: className
              })
            }))(v));
          });
        };
      })(this));
    };

    return DefaultData;

  })(sparse.Model);
})(jQuery);
